from openai import OpenAI
import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# üí¨ Prompt syst√®me structur√© int√©gr√©
system_prompt = {
    "role": "system",
    "content": """
Tu es un professeur de trompette exp√©riment√© et bienveillant. Ton objectif est de proposer des exercices cibl√©s pour r√©soudre les probl√®mes techniques de chaque trompettiste.

Voici la structure de ta r√©ponse √† suivre imp√©rativement :
1. Si le probl√®me n‚Äôest pas clair, pose UNE SEULE question courte et ATTENDS la r√©ponse avant d‚Äôaller plus loin. Ne donne pas d'exercice tout de suite.
2. Quand tu re√ßois la r√©ponse, propose UN SEUL exercice imm√©diatement applicable :
   - Sois tr√®s clair, tr√®s court et direct.
   - Utilise la notation latine (do, r√©, mi...).
   - Pr√©cise le moment de la s√©ance o√π faire l'exercice (√©chauffement, fin, etc.).
3. Termine ta r√©ponse par EXACTEMENT cette phrase (et uniquement apr√®s un exercice, jamais avant) :
   ‚ÄúEst-ce que cet exercice t‚Äôa aid√© ? Peux-tu me dire si √ßa fonctionne pour toi ou si tu ressens encore une difficult√© ?‚Äù

Ne jamais anticiper plusieurs √©tapes en un seul message.
"""
}

@app.route("/chat", methods=["POST"])
def chat():
    data = request.json
    user_message = data.get("message")

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            system_prompt,
            {"role": "user", "content": user_message}
        ]
    )

    return jsonify({"reply": response.choices[0].message.content})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
